name: Build Docker Image

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  PullBlogs:
    env:
      CNBLOGS_ISDOWN: ${{secrets.CNBLOGS_ISDOWN}}
      CNBLOGS_COOKIE: ${{ secrets.CNBLOGS_COOKIE }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: master
      - name: Set up Go 1.18.3
        if: ${{ env.CNBLOGS_ISDOWN == 'true' }}  # 是否从博客园下载，可通过更改CNBLOGS_ISDOWN的值进行提交时的下载控制
        uses: actions/setup-go@v1
        with:
          go-version: 1.18.3
        id: go
      - name: Pull blogs from cnblogs
        if: ${{ env.CNBLOGS_ISDOWN == 'true' }}  # 是否从博客园下载，可通过更改CNBLOGS_ISDOWN的值进行提交时的下载控制
        run: |
          cd source/_posts/
          echo "${{ env.CNBLOGS_COOKIE }}"
          go run downmyblogs.go -cookie "${{ env.CNBLOGS_COOKIE }}"
          ls -la
  build:
    needs: [PullBlogs]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16.15.0'

      - name: Set up Go 1.18.3
        uses: actions/setup-go@v1
        with:
          go-version: 1.18.3
        id: go

      - name: Setup Hexo
        run: |
          npm install hexo-cli -g
          npm install hexo-generator-search --save
          npm install hexo-generator-feed --save
          npm i hexo-wordcount
          npm install
      - name: Login to Aliyun Container Registry (ACR)
        uses: aliyun/acr-login@v1
        with:
          login-server: "${{ secrets.DOCKER_REGISTRY }}"
          region-id: "${{ secrets.DOCKER_REGISTRY_REGION }}"  # 3
          username: "${{ secrets.DOCKER_USERNAME }}"
          password: "${{ secrets.DOCKER_PASSWORD }}"
      - name: Deploy and Build Image
        run: |
          hexo clean
          hexo deploy
          ls -la
          pwd
          docker build -t spatxos/spatxos-blog:latest -f Dockerfile .
      - name: Push Image
        run: |
          ls -la
          pwd
          docker pull registry.cn-hongkong.aliyuncs.com/spatxos/spatxos-blog:latest

  # Docker 自动部署
  deploy-docker: 
    needs: [build]
    name: Deploy Docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }} # 服务器ip
          username: ${{ secrets.HOST_USERNAME }} # 服务器登录用户名
          password: ${{ secrets.HOST_PASSWORD }} # 服务器登录密码
          port: ${{ secrets.HOST_PORT }} # 服务器ssh端口
          script: |
            docker info
            echo $(docker ps -aqf "name=spatxos-blog")
            docker stop $(docker ps -aqf "name=spatxos-blog")
            docker container rm spatxos-blog
            docker rmi spatxos-blog
            echo 查看是否成功删除spatxos-blog
            docker ps -a
            echo 从harbor拉取docker镜像
            docker pull registry.cn-hongkong.aliyuncs.com/spatxos/spatxos-blog:latest
            docker tag registry.cn-hongkong.aliyuncs.com/spatxos/spatxos-blog:latest wangpengzong/spatxos-blog:latest
            docker run -it --rm -d -p 80:80 -v /root/soft/docker:/root/soft/docker --name spatxos-blog wangpengzong/spatxos-blog
            docker system prune -f
            echo docker容器启动成功


